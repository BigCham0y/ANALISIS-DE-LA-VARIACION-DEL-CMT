# -*- coding: utf-8 -*-
"""Graficas finales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhMVCK8ptjzsmkfOD0kPLTdoE4H-FEim
"""

#En los siguientes codigos tenemos las graficas correspondientes a los meses seleccionados
#todos estos datos e informacion corresponde al año de 2023, los eventos son seleccionados
#en base a la velocidad de medio interestelar superior a 500 km/s

import re
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

def organize_data(input_file, output_file):
    with open(input_file, 'r') as f:
        lines = f.readlines()

    organized_data = []

    for line in lines:
        # Eliminar espacios en blanco adicionales y dividir la línea en valores
        values = line.strip().split()

        organized_values = []
        for value in values:
            # Separar los valores pegados usando expresiones regulares
            separated_values = [x for x in re.split(r'(-?\d+)', value) if x]

            # Si la longitud de los valores separados es mayor a 1,
            # significa que había valores pegados
            if len(separated_values) > 1:
                organized_values.extend(separated_values)
            else:
                organized_values.append(value)

        # Unir los valores organizados nuevamente en una línea
        organized_line = ' '.join(organized_values)
        organized_data.append(organized_line)

    with open(output_file, 'w') as f:
        f.write('\n'.join(organized_data))

# Ejemplo de uso:
input_file = 'septiembre.txt'
output_file = 'datos_septiembre.txt'
organize_data(input_file, output_file)

# MES DE FEBRERO
# Leer el archivo de datos
data = pd.read_csv('datos_febrero.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-02-01', end='2023-02-28', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 29):
    for hour in range(24):
        flattened_data.loc[f'2023-02-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-02-24')  # Fecha de inicio del evento (ejemplo)
fin_evento = pd.Timestamp('2023-02-28')  # Fecha de fin del evento (ejemplo)
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio: V_ICME:650 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante febrero 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#MES DE MARZO
# Leer el archivo de datos
data = pd.read_csv('datos_marzo.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-03-01', end='2023-03-31', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 32):
    for hour in range(24):
        flattened_data.loc[f'2023-03-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-03-01')  # Fecha de inicio del evento (ejemplo)
fin_evento = pd.Timestamp('2023-03-05')  # Fecha de fin del evento (ejemplo)
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio:V_ICME:590 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante marzo 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#MES DE ABRIL
# Leer el archivo de datos
data = pd.read_csv('datos_abril.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-04-01', end='2023-04-30', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 31):
    for hour in range(24):
        flattened_data.loc[f'2023-04-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-04-21')  # Fecha de inicio del evento
fin_evento = pd.Timestamp('2023-04-28')  # Fecha de fin del evento
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio:V_ICME:520 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante abril 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#MES DE MAYO
# Leer el archivo de datos
data = pd.read_csv('mayo.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-05-01', end='2023-05-31', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 32):
    for hour in range(24):
        flattened_data.loc[f'2023-05-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6))

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')
# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento1 = pd.Timestamp('2023-05-12')  # Fecha de inicio del evento 1
fin_evento1 = pd.Timestamp('2023-05-13')  # Fecha de fin del evento 1
inicio_evento2 = pd.Timestamp('2023-05-20')  # Fecha de inicio del evento 2
fin_evento2 = pd.Timestamp('2023-05-21')  # Fecha de fin del evento 2
ax.axvline(x=inicio_evento1, color='g', linestyle='--', label='Inicio 1:V_ICME:550 km/s')
ax.axvline(x=fin_evento1, color='r', linestyle='-', label='Final 1')
ax.axvline(x=inicio_evento2, color='purple', linestyle='--', label='Inicio 2:V_ICME:520 km/s')
ax.axvline(x=fin_evento2, color='pink', linestyle='-', label='Final de evento 2')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante mayo 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# MES DE JULIO
# Leer el archivo de datos
data = pd.read_csv('julio.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-07-01', end='2023-07-31', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 32):
    for hour in range(24):
        flattened_data.loc[f'2023-07-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-07-13')  # Fecha de inicio del evento (ejemplo)
fin_evento = pd.Timestamp('2023-07-23')  # Fecha de fin del evento (ejemplo)
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio:V_ICME:500 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante julio 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#MES DE SEPTIEMBRE
# Leer el archivo de datos
data = pd.read_csv('datos_septiembre.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-09-01', end='2023-09-30', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 31):
    for hour in range(24):
        flattened_data.loc[f'2023-09-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-09-16')  # Fecha de inicio del evento (ejemplo)
fin_evento = pd.Timestamp('2023-09-25')  # Fecha de fin del evento (ejemplo)
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio:V_ICME:510 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')


# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante septiembre 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#MES DE DICIEMBRE
# Leer el archivo de datos
data = pd.read_csv('datos_diciembre.txt', header=None, delim_whitespace=True)

# Crear una secuencia de fechas y horas para el mes
dates = pd.date_range(start='2023-12-01', end='2023-12-31', freq='H')

# Crear un DataFrame vacío para almacenar los datos aplanados
flattened_data = pd.DataFrame(index=dates, columns=['Dst'])

# Aplanar los datos
for day in range(1, 32):
    for hour in range(24):
        flattened_data.loc[f'2023-12-{day} {hour}:00:00', 'Dst'] = data.loc[day - 1, hour + 1]

# Crear una figura y un eje para el gráfico
fig, ax = plt.subplots(figsize=(12, 6)) #anchoxalto, 12x6 inch

# Graficar los datos en una sola línea continua
ax.plot(flattened_data.index, flattened_data['Dst'],color='blue', label='Índice Dst')

# Configurar grid
ax.grid(True)

# Líneas verticales para el inicio y final del evento de tormenta geomagnética (modificable por el usuario)
inicio_evento = pd.Timestamp('2023-12-12')  # Fecha de inicio del evento (ejemplo)
fin_evento = pd.Timestamp('2023-12-19')  # Fecha de fin del evento (ejemplo)
ax.axvline(x=inicio_evento, color='g', linestyle='--', label='Inicio:V_ICME:500 km/s')
ax.axvline(x=fin_evento, color='r', linestyle='-', label='Final')

# Configurar leyendas y etiquetas
ax.legend()
ax.set_xlabel('Día')
ax.set_ylabel('Índice Dst (nT)')
ax.set_title('Índice Dst durante diciembre 2023')

# Formatear las etiquetas de los ejes
ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d'))

# Mostrar el gráfico
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

