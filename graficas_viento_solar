# -*- coding: utf-8 -*-
"""GRAFICAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kgcELWMMBSjVfxaflFiLqeewm7cWKnPO
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Lectura de los datos
data = pd.read_csv('datos.txt', header=None, delimiter='\t')

# Asignar nombres de columna genéricos
data.columns = ['Year', 'Day', 'Hour', 'Minute', 'Field_magnitude_average_nT', 'BX_nT_GSE_GSM',
                'BY_nT_GSE', 'BZ_nT_GSE', 'Speed_km_s', 'Proton_Density_n_cc', 'Proton_Temperature_K']

# Reemplazar los guiones "-" por NaN para que pandas los reconozca como valores faltantes
data = data.replace('-', pd.NA)

# Convertir las columnas numéricas a tipo float, excepto Year, Day, Hour y Minute
numeric_columns = data.columns.difference(['Year', 'Day', 'Hour', 'Minute'])
data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Función para combinar año, mes, día, hora y minuto en un formato de fecha y hora
def combine_datetime(row):
    day = int(row['Day']) if not pd.isna(row['Day']) else 1
    hour = str(row['Hour']).zfill(2) if not pd.isna(row['Hour']) else '00'
    # Verificar si la hora tiene formato de un solo dígito
    if len(hour) == 1:
        hour = f"0{hour}"
    minute = str(row['Minute']).zfill(2) if not pd.isna(row['Minute']) else '00'
    return f"2023-02-{day:02d} {hour}:{minute}"

# Crear una columna de tiempo combinada usando la función
data['Timestamp'] = data.apply(combine_datetime, axis=1)

# Convertir la columna de tiempo a tipo datetime eliminando el argumento format
data['Timestamp'] = pd.to_datetime(data['Timestamp'])

# Tamaño de la figura
fig, axes = plt.subplots(nrows=len(data.columns[5:]), figsize=(14, 10))

# Colores para cada gráfica
colors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']

# Iterar sobre cada columna de datos para graficar
for i, (column, color) in enumerate(zip(data.columns[4:], colors)):
    # Graficar la columna actual con respecto al tiempo
    axes[i].plot(data['Timestamp'], data[column], color=color)
    # Añadir etiquetas y título
    axes[i].set_ylabel(column.split('_')[0])  # Nombre de la columna sin las unidades
    axes[i].set_title(column)  # Título de la columna incluyendo unidades
    # Activar las líneas de la cuadrícula
    axes[i].grid(True)
    # Ajustar formato del eje x para mostrar solo el día y dividirlo por horas
    axes[i].xaxis.set_major_formatter(mdates.DateFormatter('%d'))  # Formato de día
    axes[i].xaxis.set_minor_formatter(mdates.DateFormatter('%H:%M'))  # Formato de hora:minuto
    axes[i].xaxis.set_major_locator(mdates.DayLocator())  # Separación principal por día
    axes[i].xaxis.set_minor_locator(mdates.HourLocator(interval=6))  # Separación secundaria por hora (cada 6 horas)

# Ajustar espaciado entre subgráficas
plt.tight_layout()

# Ajustar tamaño de cada gráfica
for ax in axes:
    ax.figure.set_size_inches(14, 10)

# Mostrar la figura
plt.show()

